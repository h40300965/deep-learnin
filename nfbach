{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyMN+TRycTf997UtcdZx9neR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/h40300965/deep-learnin/blob/main/nfbach\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4v9MaDYZqjeB",
        "outputId": "e7b27abe-eb6f-47a3-d9ac-974d0e4e1bc3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "NFNet(\n",
            "  (stem): NFNetStem(\n",
            "    (0): ScaledConv2d(3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
            "    (1): GELU(approximate='none')\n",
            "    (2): ScaledConv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "    (3): GELU(approximate='none')\n",
            "    (4): ScaledConv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "    (5): GELU(approximate='none')\n",
            "    (6): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n",
            "  )\n",
            "  (blocks): Sequential(\n",
            "    (0): NFBlock(\n",
            "      (conv1): ScaledConv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Sequential(\n",
            "        (0): ScaledConv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "      )\n",
            "    )\n",
            "    (1): NFBlock(\n",
            "      (conv1): ScaledConv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Sequential(\n",
            "        (0): ScaledConv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
            "      )\n",
            "    )\n",
            "    (2): NFBlock(\n",
            "      (conv1): ScaledConv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Identity()\n",
            "    )\n",
            "    (3): NFBlock(\n",
            "      (conv1): ScaledConv2d(512, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Sequential(\n",
            "        (0): ScaledConv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
            "      )\n",
            "    )\n",
            "    (4): NFBlock(\n",
            "      (conv1): ScaledConv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(2048, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Identity()\n",
            "    )\n",
            "    (5): NFBlock(\n",
            "      (conv1): ScaledConv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(2048, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Identity()\n",
            "    )\n",
            "    (6): NFBlock(\n",
            "      (conv1): ScaledConv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(2048, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Identity()\n",
            "    )\n",
            "    (7): NFBlock(\n",
            "      (conv1): ScaledConv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(2048, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Identity()\n",
            "    )\n",
            "    (8): NFBlock(\n",
            "      (conv1): ScaledConv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(2048, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Identity()\n",
            "    )\n",
            "    (9): NFBlock(\n",
            "      (conv1): ScaledConv2d(1024, 2048, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Sequential(\n",
            "        (0): ScaledConv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
            "      )\n",
            "    )\n",
            "    (10): NFBlock(\n",
            "      (conv1): ScaledConv2d(2048, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(4096, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Identity()\n",
            "    )\n",
            "    (11): NFBlock(\n",
            "      (conv1): ScaledConv2d(2048, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(4096, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Identity()\n",
            "    )\n",
            "  )\n",
            "  (head): Sequential(\n",
            "    (0): AdaptiveAvgPool2d(output_size=(1, 1))\n",
            "    (1): Flatten(start_dim=1, end_dim=-1)\n",
            "    (2): Linear(in_features=2048, out_features=1000, bias=True)\n",
            "  )\n",
            ")\n",
            "Output Shape: torch.Size([4, 1000])\n"
          ]
        }
      ],
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "\n",
        "# üîß Scaled Weight Standardization Utility\n",
        "def scaled_weight_standardization(weight, gain=1.0, eps=1e-4):\n",
        "    fan_in = weight.shape[1] * weight.shape[2] * weight.shape[3]\n",
        "    mean = weight.mean(dim=[1, 2, 3], keepdim=True)\n",
        "    var = weight.var(dim=[1, 2, 3], keepdim=True)\n",
        "    scale = gain * (fan_in ** 0.5) / (var + eps).sqrt()\n",
        "    return (weight - mean) * scale\n",
        "\n",
        "\n",
        "# üß± Conv2d with Scaled WS\n",
        "class ScaledConv2d(nn.Conv2d):\n",
        "    def __init__(self, in_channels, out_channels, kernel_size,\n",
        "                 stride=1, padding=0, dilation=1, groups=1, bias=False, gain=True):\n",
        "        super().__init__(in_channels, out_channels, kernel_size,\n",
        "                         stride, padding, dilation, groups, bias)\n",
        "        self.gain = nn.Parameter(torch.ones(out_channels, 1, 1, 1)) if gain else 1.0\n",
        "\n",
        "    def forward(self, x):\n",
        "        weight = scaled_weight_standardization(self.weight, gain=self.gain)\n",
        "        return F.conv2d(x, weight, self.bias, self.stride,\n",
        "                         self.padding, self.dilation, self.groups)\n",
        "\n",
        "\n",
        "# ‚öôÔ∏è NFBlock with SkipInit\n",
        "class NFBlock(nn.Module):\n",
        "    def __init__(self, in_channels, out_channels, stride=1, expansion=2):\n",
        "        super().__init__()\n",
        "        mid_channels = in_channels * expansion\n",
        "        self.conv1 = ScaledConv2d(in_channels, mid_channels, 3, stride, 1)\n",
        "        self.act1 = nn.GELU()\n",
        "\n",
        "        self.conv2 = ScaledConv2d(mid_channels, out_channels, 3, 1, 1)\n",
        "        self.act2 = nn.GELU()\n",
        "\n",
        "        # SkipInit Layer\n",
        "        if stride != 1 or in_channels != out_channels:\n",
        "            self.shortcut = nn.Sequential(\n",
        "                ScaledConv2d(in_channels, out_channels, 1, stride, 0),\n",
        "            )\n",
        "            self.skip_gain = nn.Parameter(torch.zeros(1))\n",
        "        else:\n",
        "            self.shortcut = nn.Identity()\n",
        "            self.skip_gain = nn.Parameter(torch.zeros(1))\n",
        "\n",
        "    def forward(self, x):\n",
        "        shortcut = self.shortcut(x)\n",
        "        x = self.conv1(x)\n",
        "        x = self.act1(x)\n",
        "        x = self.conv2(x)\n",
        "        x = x * self.skip_gain\n",
        "        x += shortcut\n",
        "        x = self.act2(x)\n",
        "        return x\n",
        "\n",
        "\n",
        "# üèóÔ∏è Stem Network\n",
        "class NFNetStem(nn.Sequential):\n",
        "    def __init__(self, in_channels=3, width=64):\n",
        "        super().__init__(\n",
        "            ScaledConv2d(in_channels, width, 3, 2, 1),\n",
        "            nn.GELU(),\n",
        "            ScaledConv2d(width, width, 3, 1, 1),\n",
        "            nn.GELU(),\n",
        "            ScaledConv2d(width, width, 3, 1, 1),\n",
        "            nn.GELU(),\n",
        "            nn.MaxPool2d(3, 2, 1)\n",
        "        )\n",
        "\n",
        "\n",
        "# üß¨ NFNet Backbone\n",
        "class NFNet(nn.Module):\n",
        "    def __init__(self, block, depths, widths, num_classes=1000, stem_width=64):\n",
        "        super().__init__()\n",
        "        self.stem = NFNetStem(in_channels=3, width=stem_width)\n",
        "\n",
        "        layers = []\n",
        "        for stage_idx, (depth, width) in enumerate(zip(depths, widths)):\n",
        "            in_ch = widths[stage_idx - 1] if stage_idx > 0 else stem_width\n",
        "            for d in range(depth):\n",
        "                layers.append(block(in_ch, width, stride=2 if d == 0 and stage_idx > 0 else 1))\n",
        "                in_ch = width\n",
        "\n",
        "        self.blocks = nn.Sequential(*layers)\n",
        "        self.head = nn.Sequential(\n",
        "            nn.AdaptiveAvgPool2d((1, 1)),\n",
        "            nn.Flatten(),\n",
        "            nn.Linear(widths[-1], num_classes)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.stem(x)\n",
        "        x = self.blocks(x)\n",
        "        x = self.head(x)\n",
        "        return x\n",
        "\n",
        "\n",
        "# üìê NFNet Configurations\n",
        "def nfnet_f0(num_classes=1000):\n",
        "    return NFNet(NFBlock, depths=[1, 2, 6, 3], widths=[256, 512, 1024, 2048], num_classes=num_classes)\n",
        "\n",
        "\n",
        "def nfnet_f1(num_classes=1000):\n",
        "    return NFNet(NFBlock, depths=[2, 4, 12, 6], widths=[256, 512, 1024, 2048], num_classes=num_classes)\n",
        "\n",
        "\n",
        "def nfnet_f3(num_classes=1000):\n",
        "    return NFNet(NFBlock, depths=[4, 8, 24, 12], widths=[256, 512, 1024, 2048], num_classes=num_classes)\n",
        "\n",
        "\n",
        "def nfnet_f5(num_classes=1000):\n",
        "    return NFNet(NFBlock, depths=[6, 12, 36, 18], widths=[256, 512, 1024, 2048], num_classes=num_classes)\n",
        "\n",
        "\n",
        "# üß™ Example Usage\n",
        "if __name__ == \"__main__\":\n",
        "    model = nfnet_f0(num_classes=1000)\n",
        "    print(model)\n",
        "\n",
        "    x = torch.randn(4, 3, 224, 224)\n",
        "    y = model(x)\n",
        "    print(\"Output Shape:\", y.shape)  # Output: [4, 1000]"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "import torch.nn.functional as F\n",
        "from torch.utils.data import DataLoader\n",
        "import torchvision\n",
        "import torchvision.transforms as transforms\n",
        "\n",
        "# üîß ŸÅÿß€åŸÑ ŸÇÿ®ŸÑ€å NFNet ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ\n",
        "from nfnets import nfnet_f0  # ŸÅÿ±ÿ∂: ⁄©ÿØ NFNet ÿØÿ± ŸÅÿß€åŸÑ nfnets.py ÿ∞ÿÆ€åÿ±Ÿá ÿ¥ÿØŸá ÿßÿ≥ÿ™\n",
        "\n",
        "# üì¶ Hyperparameters\n",
        "BATCH_SIZE = 512\n",
        "EPOCHS = 50\n",
        "LR = 0.001\n",
        "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "# üîÑ Transformations\n",
        "transform_train = transforms.Compose([\n",
        "    transforms.RandomCrop(32, padding=4),\n",
        "    transforms.RandomHorizontalFlip(),\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),\n",
        "])\n",
        "\n",
        "transform_test = transforms.Compose([\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),\n",
        "])\n",
        "\n",
        "# üìÅ Dataset & Dataloader\n",
        "train_dataset = torchvision.datasets.CIFAR10(\n",
        "    root='./data', train=True, transform=transform_train, download=True)\n",
        "\n",
        "test_dataset = torchvision.datasets.CIFAR10(\n",
        "    root='./data', train=False, transform=transform_test, download=True)\n",
        "\n",
        "train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)\n",
        "test_loader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False)\n",
        "\n",
        "# üß† ŸÖÿØŸÑ\n",
        "model = nfnet_f0(num_classes=10).to(DEVICE)\n",
        "\n",
        "# ‚öôÔ∏è ÿ®Ÿá€åŸÜŸá‚Äåÿ≥ÿßÿ≤ Ÿà ÿ™ÿßÿ®ÿπ Ÿáÿ≤€åŸÜŸá\n",
        "optimizer = optim.AdamW(model.parameters(), lr=LR)\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "\n",
        "# üìà Train Loop\n",
        "def train(model, device, train_loader, optimizer, epoch):\n",
        "    model.train()\n",
        "    for batch_idx, (data, target) in enumerate(train_loader):\n",
        "        data, target = data.to(device), target.to(device)\n",
        "        optimizer.zero_grad()\n",
        "        output = model(data)\n",
        "        loss = criterion(output, target)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        if batch_idx % 100 == 0:\n",
        "            print(f'Train Epoch: {epoch} [{batch_idx * len(data)}/{len(train_loader.dataset)}]'\n",
        "                  f'\\tLoss: {loss.item():.6f}')\n",
        "\n",
        "# üìä Test Loop\n",
        "def test(model, device, test_loader):\n",
        "    model.eval()\n",
        "    test_loss = 0\n",
        "    correct = 0\n",
        "    with torch.no_grad():\n",
        "        for data, target in test_loader:\n",
        "            data, target = data.to(device), target.to(device)\n",
        "            output = model(data)\n",
        "            test_loss += criterion(output, target).item()\n",
        "            pred = output.argmax(dim=1, keepdim=True)\n",
        "            correct += pred.eq(target.view_as(pred)).sum().item()\n",
        "\n",
        "    test_loss /= len(test_loader)\n",
        "    accuracy = 100. * correct / len(test_loader.dataset)\n",
        "    print(f'\\nTest set: Average loss: {test_loss:.4f}, Accuracy: {correct}/{len(test_loader.dataset)} ({accuracy:.2f}%)\\n')\n",
        "\n",
        "# üèãÔ∏è‚Äç‚ôÇÔ∏è Training Loop ⁄©ŸÑ€å\n",
        "for epoch in range(1, EPOCHS + 1):\n",
        "    train(model, DEVICE, train_loader, optimizer, epoch)\n",
        "    test(model, DEVICE, test_loader)\n",
        "\n",
        "print(\"‚úÖ ÿ¢ŸÖŸàÿ≤ÿ¥ ⁄©ÿßŸÖŸÑ ÿ¥ÿØ!\")"
      ],
      "metadata": {
        "id": "2yefdqKIu8wq"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}