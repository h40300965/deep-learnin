{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyOz+ESAvaP6fLOLDl1E7xi5",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/h40300965/deep-learnin/blob/main/nfnet%20cafari\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4v9MaDYZqjeB",
        "outputId": "e7b27abe-eb6f-47a3-d9ac-974d0e4e1bc3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "NFNet(\n",
            "  (stem): NFNetStem(\n",
            "    (0): ScaledConv2d(3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
            "    (1): GELU(approximate='none')\n",
            "    (2): ScaledConv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "    (3): GELU(approximate='none')\n",
            "    (4): ScaledConv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "    (5): GELU(approximate='none')\n",
            "    (6): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n",
            "  )\n",
            "  (blocks): Sequential(\n",
            "    (0): NFBlock(\n",
            "      (conv1): ScaledConv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Sequential(\n",
            "        (0): ScaledConv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "      )\n",
            "    )\n",
            "    (1): NFBlock(\n",
            "      (conv1): ScaledConv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Sequential(\n",
            "        (0): ScaledConv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
            "      )\n",
            "    )\n",
            "    (2): NFBlock(\n",
            "      (conv1): ScaledConv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Identity()\n",
            "    )\n",
            "    (3): NFBlock(\n",
            "      (conv1): ScaledConv2d(512, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Sequential(\n",
            "        (0): ScaledConv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
            "      )\n",
            "    )\n",
            "    (4): NFBlock(\n",
            "      (conv1): ScaledConv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(2048, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Identity()\n",
            "    )\n",
            "    (5): NFBlock(\n",
            "      (conv1): ScaledConv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(2048, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Identity()\n",
            "    )\n",
            "    (6): NFBlock(\n",
            "      (conv1): ScaledConv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(2048, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Identity()\n",
            "    )\n",
            "    (7): NFBlock(\n",
            "      (conv1): ScaledConv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(2048, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Identity()\n",
            "    )\n",
            "    (8): NFBlock(\n",
            "      (conv1): ScaledConv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(2048, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Identity()\n",
            "    )\n",
            "    (9): NFBlock(\n",
            "      (conv1): ScaledConv2d(1024, 2048, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Sequential(\n",
            "        (0): ScaledConv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
            "      )\n",
            "    )\n",
            "    (10): NFBlock(\n",
            "      (conv1): ScaledConv2d(2048, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(4096, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Identity()\n",
            "    )\n",
            "    (11): NFBlock(\n",
            "      (conv1): ScaledConv2d(2048, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act1): GELU(approximate='none')\n",
            "      (conv2): ScaledConv2d(4096, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "      (act2): GELU(approximate='none')\n",
            "      (shortcut): Identity()\n",
            "    )\n",
            "  )\n",
            "  (head): Sequential(\n",
            "    (0): AdaptiveAvgPool2d(output_size=(1, 1))\n",
            "    (1): Flatten(start_dim=1, end_dim=-1)\n",
            "    (2): Linear(in_features=2048, out_features=1000, bias=True)\n",
            "  )\n",
            ")\n",
            "Output Shape: torch.Size([4, 1000])\n"
          ]
        }
      ],
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "\n",
        "# üîß Scaled Weight Standardization Utility\n",
        "def scaled_weight_standardization(weight, gain=1.0, eps=1e-4):\n",
        "    fan_in = weight.shape[1] * weight.shape[2] * weight.shape[3]\n",
        "    mean = weight.mean(dim=[1, 2, 3], keepdim=True)\n",
        "    var = weight.var(dim=[1, 2, 3], keepdim=True)\n",
        "    scale = gain * (fan_in ** 0.5) / (var + eps).sqrt()\n",
        "    return (weight - mean) * scale\n",
        "\n",
        "\n",
        "# üß± Conv2d with Scaled WS\n",
        "class ScaledConv2d(nn.Conv2d):\n",
        "    def __init__(self, in_channels, out_channels, kernel_size,\n",
        "                 stride=1, padding=0, dilation=1, groups=1, bias=False, gain=True):\n",
        "        super().__init__(in_channels, out_channels, kernel_size,\n",
        "                         stride, padding, dilation, groups, bias)\n",
        "        self.gain = nn.Parameter(torch.ones(out_channels, 1, 1, 1)) if gain else 1.0\n",
        "\n",
        "    def forward(self, x):\n",
        "        weight = scaled_weight_standardization(self.weight, gain=self.gain)\n",
        "        return F.conv2d(x, weight, self.bias, self.stride,\n",
        "                         self.padding, self.dilation, self.groups)\n",
        "\n",
        "\n",
        "# ‚öôÔ∏è NFBlock with SkipInit\n",
        "class NFBlock(nn.Module):\n",
        "    def __init__(self, in_channels, out_channels, stride=1, expansion=2):\n",
        "        super().__init__()\n",
        "        mid_channels = in_channels * expansion\n",
        "        self.conv1 = ScaledConv2d(in_channels, mid_channels, 3, stride, 1)\n",
        "        self.act1 = nn.GELU()\n",
        "\n",
        "        self.conv2 = ScaledConv2d(mid_channels, out_channels, 3, 1, 1)\n",
        "        self.act2 = nn.GELU()\n",
        "\n",
        "        # SkipInit Layer\n",
        "        if stride != 1 or in_channels != out_channels:\n",
        "            self.shortcut = nn.Sequential(\n",
        "                ScaledConv2d(in_channels, out_channels, 1, stride, 0),\n",
        "            )\n",
        "            self.skip_gain = nn.Parameter(torch.zeros(1))\n",
        "        else:\n",
        "            self.shortcut = nn.Identity()\n",
        "            self.skip_gain = nn.Parameter(torch.zeros(1))\n",
        "\n",
        "    def forward(self, x):\n",
        "        shortcut = self.shortcut(x)\n",
        "        x = self.conv1(x)\n",
        "        x = self.act1(x)\n",
        "        x = self.conv2(x)\n",
        "        x = x * self.skip_gain\n",
        "        x += shortcut\n",
        "        x = self.act2(x)\n",
        "        return x\n",
        "\n",
        "\n",
        "# üèóÔ∏è Stem Network\n",
        "class NFNetStem(nn.Sequential):\n",
        "    def __init__(self, in_channels=3, width=64):\n",
        "        super().__init__(\n",
        "            ScaledConv2d(in_channels, width, 3, 2, 1),\n",
        "            nn.GELU(),\n",
        "            ScaledConv2d(width, width, 3, 1, 1),\n",
        "            nn.GELU(),\n",
        "            ScaledConv2d(width, width, 3, 1, 1),\n",
        "            nn.GELU(),\n",
        "            nn.MaxPool2d(3, 2, 1)\n",
        "        )\n",
        "\n",
        "\n",
        "# üß¨ NFNet Backbone\n",
        "class NFNet(nn.Module):\n",
        "    def __init__(self, block, depths, widths, num_classes=1000, stem_width=64):\n",
        "        super().__init__()\n",
        "        self.stem = NFNetStem(in_channels=3, width=stem_width)\n",
        "\n",
        "        layers = []\n",
        "        for stage_idx, (depth, width) in enumerate(zip(depths, widths)):\n",
        "            in_ch = widths[stage_idx - 1] if stage_idx > 0 else stem_width\n",
        "            for d in range(depth):\n",
        "                layers.append(block(in_ch, width, stride=2 if d == 0 and stage_idx > 0 else 1))\n",
        "                in_ch = width\n",
        "\n",
        "        self.blocks = nn.Sequential(*layers)\n",
        "        self.head = nn.Sequential(\n",
        "            nn.AdaptiveAvgPool2d((1, 1)),\n",
        "            nn.Flatten(),\n",
        "            nn.Linear(widths[-1], num_classes)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.stem(x)\n",
        "        x = self.blocks(x)\n",
        "        x = self.head(x)\n",
        "        return x\n",
        "\n",
        "\n",
        "# üìê NFNet Configurations\n",
        "def nfnet_f0(num_classes=1000):\n",
        "    return NFNet(NFBlock, depths=[1, 2, 6, 3], widths=[256, 512, 1024, 2048], num_classes=num_classes)\n",
        "\n",
        "\n",
        "def nfnet_f1(num_classes=1000):\n",
        "    return NFNet(NFBlock, depths=[2, 4, 12, 6], widths=[256, 512, 1024, 2048], num_classes=num_classes)\n",
        "\n",
        "\n",
        "def nfnet_f3(num_classes=1000):\n",
        "    return NFNet(NFBlock, depths=[4, 8, 24, 12], widths=[256, 512, 1024, 2048], num_classes=num_classes)\n",
        "\n",
        "\n",
        "def nfnet_f5(num_classes=1000):\n",
        "    return NFNet(NFBlock, depths=[6, 12, 36, 18], widths=[256, 512, 1024, 2048], num_classes=num_classes)\n",
        "\n",
        "\n",
        "# üß™ Example Usage\n",
        "if __name__ == \"__main__\":\n",
        "    model = nfnet_f0(num_classes=1000)\n",
        "    print(model)\n",
        "\n",
        "    x = torch.randn(4, 3, 224, 224)\n",
        "    y = model(x)\n",
        "    print(\"Output Shape:\", y.shape)  # Output: [4, 1000]"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install torch torchvision torchaudio"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QTnckHy_vZPs",
        "outputId": "80891d21-c796-405c-e5e9-6bb9c0dc8d38"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: torch in /usr/local/lib/python3.11/dist-packages (2.6.0+cu124)\n",
            "Requirement already satisfied: torchvision in /usr/local/lib/python3.11/dist-packages (0.21.0+cu124)\n",
            "Requirement already satisfied: torchaudio in /usr/local/lib/python3.11/dist-packages (2.6.0+cu124)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from torch) (3.18.0)\n",
            "Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.11/dist-packages (from torch) (4.13.2)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch) (3.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch) (3.1.6)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch) (2025.3.2)\n",
            "Collecting nvidia-cuda-nvrtc-cu12==12.4.127 (from torch)\n",
            "  Downloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cuda-runtime-cu12==12.4.127 (from torch)\n",
            "  Downloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cuda-cupti-cu12==12.4.127 (from torch)\n",
            "  Downloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cudnn-cu12==9.1.0.70 (from torch)\n",
            "  Downloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cublas-cu12==12.4.5.8 (from torch)\n",
            "  Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cufft-cu12==11.2.1.3 (from torch)\n",
            "  Downloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-curand-cu12==10.3.5.147 (from torch)\n",
            "  Downloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cusolver-cu12==11.6.1.9 (from torch)\n",
            "  Downloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cusparse-cu12==12.3.1.170 (from torch)\n",
            "  Downloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch) (0.6.2)\n",
            "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch) (2.21.5)\n",
            "Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
            "Collecting nvidia-nvjitlink-cu12==12.4.127 (from torch)\n",
            "  Downloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch) (3.2.0)\n",
            "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch) (1.13.1)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch) (1.3.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from torchvision) (2.0.2)\n",
            "Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /usr/local/lib/python3.11/dist-packages (from torchvision) (11.2.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch) (3.0.2)\n",
            "Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl (363.4 MB)\n",
            "\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m1.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (13.8 MB)\n",
            "\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m114.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (24.6 MB)\n",
            "\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m27.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (883 kB)\n",
            "\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m58.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl (664.8 MB)\n",
            "\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m1.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl (211.5 MB)\n",
            "\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m1.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl (56.3 MB)\n",
            "\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m19.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl (127.9 MB)\n",
            "\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m14.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl (207.5 MB)\n",
            "\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m1.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (21.1 MB)\n",
            "\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m28.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: nvidia-nvjitlink-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, nvidia-cusparse-cu12, nvidia-cudnn-cu12, nvidia-cusolver-cu12\n",
            "  Attempting uninstall: nvidia-nvjitlink-cu12\n",
            "    Found existing installation: nvidia-nvjitlink-cu12 12.5.82\n",
            "    Uninstalling nvidia-nvjitlink-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-nvjitlink-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-curand-cu12\n",
            "    Found existing installation: nvidia-curand-cu12 10.3.6.82\n",
            "    Uninstalling nvidia-curand-cu12-10.3.6.82:\n",
            "      Successfully uninstalled nvidia-curand-cu12-10.3.6.82\n",
            "  Attempting uninstall: nvidia-cufft-cu12\n",
            "    Found existing installation: nvidia-cufft-cu12 11.2.3.61\n",
            "    Uninstalling nvidia-cufft-cu12-11.2.3.61:\n",
            "      Successfully uninstalled nvidia-cufft-cu12-11.2.3.61\n",
            "  Attempting uninstall: nvidia-cuda-runtime-cu12\n",
            "    Found existing installation: nvidia-cuda-runtime-cu12 12.5.82\n",
            "    Uninstalling nvidia-cuda-runtime-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-cuda-runtime-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-cuda-nvrtc-cu12\n",
            "    Found existing installation: nvidia-cuda-nvrtc-cu12 12.5.82\n",
            "    Uninstalling nvidia-cuda-nvrtc-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-cuda-nvrtc-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-cuda-cupti-cu12\n",
            "    Found existing installation: nvidia-cuda-cupti-cu12 12.5.82\n",
            "    Uninstalling nvidia-cuda-cupti-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-cuda-cupti-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-cublas-cu12\n",
            "    Found existing installation: nvidia-cublas-cu12 12.5.3.2\n",
            "    Uninstalling nvidia-cublas-cu12-12.5.3.2:\n",
            "      Successfully uninstalled nvidia-cublas-cu12-12.5.3.2\n",
            "  Attempting uninstall: nvidia-cusparse-cu12\n",
            "    Found existing installation: nvidia-cusparse-cu12 12.5.1.3\n",
            "    Uninstalling nvidia-cusparse-cu12-12.5.1.3:\n",
            "      Successfully uninstalled nvidia-cusparse-cu12-12.5.1.3\n",
            "  Attempting uninstall: nvidia-cudnn-cu12\n",
            "    Found existing installation: nvidia-cudnn-cu12 9.3.0.75\n",
            "    Uninstalling nvidia-cudnn-cu12-9.3.0.75:\n",
            "      Successfully uninstalled nvidia-cudnn-cu12-9.3.0.75\n",
            "  Attempting uninstall: nvidia-cusolver-cu12\n",
            "    Found existing installation: nvidia-cusolver-cu12 11.6.3.83\n",
            "    Uninstalling nvidia-cusolver-cu12-11.6.3.83:\n",
            "      Successfully uninstalled nvidia-cusolver-cu12-11.6.3.83\n",
            "Successfully installed nvidia-cublas-cu12-12.4.5.8 nvidia-cuda-cupti-cu12-12.4.127 nvidia-cuda-nvrtc-cu12-12.4.127 nvidia-cuda-runtime-cu12-12.4.127 nvidia-cudnn-cu12-9.1.0.70 nvidia-cufft-cu12-11.2.1.3 nvidia-curand-cu12-10.3.5.147 nvidia-cusolver-cu12-11.6.1.9 nvidia-cusparse-cu12-12.3.1.170 nvidia-nvjitlink-cu12-12.4.127\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "import torch.nn.functional as F\n",
        "from torch.utils.data import DataLoader\n",
        "import torchvision\n",
        "import torchvision.transforms as transforms\n",
        "\n",
        "class NFNet(nn.Module):\n",
        "    def __init__(self, block, depths, widths, num_classes=1000, stem_width=64):\n",
        "        super().__init__()\n",
        "        self.stem = NFNetStem(in_channels=3, width=stem_width)\n",
        "\n",
        "        layers = []\n",
        "        for stage_idx, (depth, width) in enumerate(zip(depths, widths)):\n",
        "            in_ch = widths[stage_idx - 1] if stage_idx > 0 else stem_width\n",
        "            for d in range(depth):\n",
        "                layers.append(block(in_ch, width, stride=2 if d == 0 and stage_idx > 0 else 1))\n",
        "                in_ch = width\n",
        "\n",
        "        self.blocks = nn.Sequential(*layers)\n",
        "        self.head = nn.Sequential(\n",
        "            nn.AdaptiveAvgPool2d((1, 1)),\n",
        "            nn.Flatten(),\n",
        "            nn.Linear(widths[-1], num_classes)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.stem(x)\n",
        "        x = self.blocks(x)\n",
        "        x = self.head(x)\n",
        "        return x\n",
        "def nfnet_f0(num_classes=1000):\n",
        "    return NFNet(NFBlock, depths=[1, 2, 6, 3], widths=[256, 512, 1024, 2048], num_classes=num_classes)\n",
        "\n",
        "def nfnet_f1(num_classes=1000):\n",
        "    return NFNet(NFBlock, depths=[2, 4, 12, 6], widths=[256, 512, 1024, 2048], num_classes=num_classes)\n",
        "\n",
        "def nfnet_f3(num_classes=1000):\n",
        "    return NFNet(NFBlock, depths=[4, 8, 24, 12], widths=[256, 512, 1024, 2048], num_classes=num_classes)\n",
        "\n",
        "def nfnet_f5(num_classes=1000):\n",
        "    return NFNet(NFBlock, depths=[6, 12, 36, 18], widths=[256, 512, 1024, 2048], num_classes=num_classes)\n",
        "if __name__ == \"__main__\":\n",
        "    model = nfnet_f0(num_classes=1000)\n",
        "    print(model)\n",
        "\n",
        "    x = torch.randn(4, 3, 224, 224)\n",
        "    y = model(x)\n",
        "    print(\"Output Shape:\", y.shape)  # Output: [4, 1000]\n",
        "\n",
        "# üîß ŸÅÿß€åŸÑ ŸÇÿ®ŸÑ€å NFNet ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ\n",
        "from nfnets import nfnet_f0  # ŸÅÿ±ÿ∂: ⁄©ÿØ NFNet ÿØÿ± ŸÅÿß€åŸÑ nfnets.py ÿ∞ÿÆ€åÿ±Ÿá ÿ¥ÿØŸá ÿßÿ≥ÿ™\n",
        "\n",
        "# üì¶ Hyperparameters\n",
        "BATCH_SIZE = 512\n",
        "EPOCHS = 50\n",
        "LR = 0.001\n",
        "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "# üîÑ Transformations\n",
        "transform_train = transforms.Compose([\n",
        "    transforms.RandomCrop(32, padding=4),\n",
        "    transforms.RandomHorizontalFlip(),\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),\n",
        "])\n",
        "\n",
        "transform_test = transforms.Compose([\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),\n",
        "])\n",
        "\n",
        "# üìÅ Dataset & Dataloader\n",
        "train_dataset = torchvision.datasets.CIFAR10(\n",
        "    root='./data', train=True, transform=transform_train, download=True)\n",
        "\n",
        "test_dataset = torchvision.datasets.CIFAR10(\n",
        "    root='./data', train=False, transform=transform_test, download=True)\n",
        "\n",
        "train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)\n",
        "test_loader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False)\n",
        "\n",
        "# üß† ŸÖÿØŸÑ\n",
        "model = nfnet_f0(num_classes=10).to(DEVICE)\n",
        "\n",
        "# ‚öôÔ∏è ÿ®Ÿá€åŸÜŸá‚Äåÿ≥ÿßÿ≤ Ÿà ÿ™ÿßÿ®ÿπ Ÿáÿ≤€åŸÜŸá\n",
        "optimizer = optim.AdamW(model.parameters(), lr=LR)\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "\n",
        "# üìà Train Loop\n",
        "def train(model, device, train_loader, optimizer, epoch):\n",
        "    model.train()\n",
        "    for batch_idx, (data, target) in enumerate(train_loader):\n",
        "        data, target = data.to(device), target.to(device)\n",
        "        optimizer.zero_grad()\n",
        "        output = model(data)\n",
        "        loss = criterion(output, target)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        if batch_idx % 100 == 0:\n",
        "            print(f'Train Epoch: {epoch} [{batch_idx * len(data)}/{len(train_loader.dataset)}]'\n",
        "                  f'\\tLoss: {loss.item():.6f}')\n",
        "\n",
        "# üìä Test Loop\n",
        "def test(model, device, test_loader):\n",
        "    model.eval()\n",
        "    test_loss = 0\n",
        "    correct = 0\n",
        "    with torch.no_grad():\n",
        "        for data, target in test_loader:\n",
        "            data, target = data.to(device), target.to(device)\n",
        "            output = model(data)\n",
        "            test_loss += criterion(output, target).item()\n",
        "            pred = output.argmax(dim=1, keepdim=True)\n",
        "            correct += pred.eq(target.view_as(pred)).sum().item()\n",
        "\n",
        "    test_loss /= len(test_loader)\n",
        "    accuracy = 100. * correct / len(test_loader.dataset)\n",
        "    print(f'\\nTest set: Average loss: {test_loss:.4f}, Accuracy: {correct}/{len(test_loader.dataset)} ({accuracy:.2f}%)\\n')\n",
        "\n",
        "# üèãÔ∏è‚Äç‚ôÇÔ∏è Training Loop ⁄©ŸÑ€å\n",
        "for epoch in range(1, EPOCHS + 1):\n",
        "    train(model, DEVICE, train_loader, optimizer, epoch)\n",
        "    test(model, DEVICE, test_loader)\n",
        "\n",
        "print(\"‚úÖ ÿ¢ŸÖŸàÿ≤ÿ¥ ⁄©ÿßŸÖŸÑ ÿ¥ÿØ!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 349
        },
        "id": "2yefdqKIu8wq",
        "outputId": "2e877b26-8ea8-494e-b5ab-96e1f6ab135a"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'NFNet' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-2-dc5a5c58a522>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mNFNet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mNFBlock\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdepths\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m12\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m36\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m18\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwidths\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m256\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m512\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1024\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2048\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_classes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnum_classes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m     \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnfnet_f0\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_classes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-2-dc5a5c58a522>\u001b[0m in \u001b[0;36mnfnet_f0\u001b[0;34m(num_classes)\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtorchvision\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransforms\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtransforms\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mnfnet_f0\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_classes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mNFNet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mNFBlock\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdepths\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwidths\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m256\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m512\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1024\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2048\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_classes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnum_classes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mnfnet_f1\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_classes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'NFNet' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# üì¶ Step 1: Install Required Packages\n",
        "!pip install torch torchvision torchaudio --quiet\n",
        "\n",
        "# üß† Step 2: Define the NFNet Model (Paste from previous implementation or upload file)\n",
        "# ÿØÿ± ÿß€åŸÜÿ¨ÿß ŸÖÿß ⁄©ÿØ NFNet ÿ±ÿß ÿ®Ÿá ÿµŸàÿ±ÿ™ inline ŸÖ€å‚ÄåŸÜŸà€åÿ≥€åŸÖ\n",
        "\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torch.optim as optim\n",
        "from torch.utils.data import DataLoader\n",
        "import torchvision\n",
        "import torchvision.transforms as transforms\n",
        "\n",
        "\n",
        "# üîß Scaled Weight Standardization Utility\n",
        "def scaled_weight_standardization(weight, gain=1.0, eps=1e-4):\n",
        "    fan_in = weight.shape[1] * weight.shape[2] * weight.shape[3]\n",
        "    mean = weight.mean(dim=[1, 2, 3], keepdim=True)\n",
        "    var = weight.var(dim=[1, 2, 3], keepdim=True)\n",
        "    scale = gain * (fan_in ** 0.5) / (var + eps).sqrt()\n",
        "    return (weight - mean) * scale\n",
        "\n",
        "\n",
        "# üß± Conv2d with Scaled WS\n",
        "class ScaledConv2d(nn.Conv2d):\n",
        "    def __init__(self, in_channels, out_channels, kernel_size,\n",
        "                 stride=1, padding=0, dilation=1, groups=1, bias=False, gain=True):\n",
        "        super().__init__(in_channels, out_channels, kernel_size,\n",
        "                         stride, padding, dilation, groups, bias)\n",
        "        self.gain = nn.Parameter(torch.ones(out_channels, 1, 1, 1)) if gain else 1.0\n",
        "\n",
        "    def forward(self, x):\n",
        "        weight = scaled_weight_standardization(self.weight, gain=self.gain)\n",
        "        return F.conv2d(x, weight, self.bias, self.stride,\n",
        "                         self.padding, self.dilation, self.groups)\n",
        "\n",
        "\n",
        "# ‚öôÔ∏è NFBlock with SkipInit\n",
        "class NFBlock(nn.Module):\n",
        "    def __init__(self, in_channels, out_channels, stride=1, expansion=2):\n",
        "        super().__init__()\n",
        "        mid_channels = in_channels * expansion\n",
        "        self.conv1 = ScaledConv2d(in_channels, mid_channels, 3, stride, 1)\n",
        "        self.act1 = nn.GELU()\n",
        "\n",
        "        self.conv2 = ScaledConv2d(mid_channels, out_channels, 3, 1, 1)\n",
        "        self.act2 = nn.GELU()\n",
        "\n",
        "        # SkipInit Layer\n",
        "        if stride != 1 or in_channels != out_channels:\n",
        "            self.shortcut = nn.Sequential(\n",
        "                ScaledConv2d(in_channels, out_channels, 1, stride, 0),\n",
        "            )\n",
        "            self.skip_gain = nn.Parameter(torch.zeros(1))\n",
        "        else:\n",
        "            self.shortcut = nn.Identity()\n",
        "            self.skip_gain = nn.Parameter(torch.zeros(1))\n",
        "\n",
        "    def forward(self, x):\n",
        "        shortcut = self.shortcut(x)\n",
        "        x = self.conv1(x)\n",
        "        x = self.act1(x)\n",
        "        x = self.conv2(x)\n",
        "        x = x * self.skip_gain\n",
        "        x += shortcut\n",
        "        x = self.act2(x)\n",
        "        return x\n",
        "\n",
        "\n",
        "# üß¨ NFNet Backbone\n",
        "class NFNet(nn.Module):\n",
        "    def __init__(self, block, depths, widths, num_classes=10, stem_width=64):\n",
        "        super().__init__()\n",
        "        self.stem = nn.Sequential(\n",
        "            ScaledConv2d(3, stem_width, 3, 2, 1),\n",
        "            nn.GELU(),\n",
        "            ScaledConv2d(stem_width, stem_width, 3, 1, 1),\n",
        "            nn.GELU(),\n",
        "            ScaledConv2d(stem_width, stem_width, 3, 1, 1),\n",
        "            nn.GELU(),\n",
        "            nn.MaxPool2d(3, 2, 1)\n",
        "        )\n",
        "\n",
        "        layers = []\n",
        "        for stage_idx, (depth, width) in enumerate(zip(depths, widths)):\n",
        "            in_ch = widths[stage_idx - 1] if stage_idx > 0 else stem_width\n",
        "            for d in range(depth):\n",
        "                layers.append(block(in_ch, width, stride=2 if d == 0 and stage_idx > 0 else 1))\n",
        "                in_ch = width\n",
        "\n",
        "        self.blocks = nn.Sequential(*layers)\n",
        "        self.head = nn.Sequential(\n",
        "            nn.AdaptiveAvgPool2d((1, 1)),\n",
        "            nn.Flatten(),\n",
        "            nn.Linear(widths[-1], num_classes)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.stem(x)\n",
        "        x = self.blocks(x)\n",
        "        x = self.head(x)\n",
        "        return x\n",
        "\n",
        "\n",
        "# üìê NFNet Configurations\n",
        "def nfnet_f0(num_classes=10):\n",
        "    return NFNet(NFBlock, depths=[1, 2, 6, 3], widths=[256, 512, 1024, 2048], num_classes=num_classes)\n",
        "\n",
        "\n",
        "# üîÑ Hyperparameters\n",
        "BATCH_SIZE = 512\n",
        "EPOCHS = 20\n",
        "LR = 0.001\n",
        "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "\n",
        "# üì¶ Dataset & Dataloader\n",
        "transform_train = transforms.Compose([\n",
        "    transforms.RandomCrop(32, padding=4),\n",
        "    transforms.RandomHorizontalFlip(),\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),\n",
        "])\n",
        "\n",
        "transform_test = transforms.Compose([\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),\n",
        "])\n",
        "\n",
        "train_dataset = torchvision.datasets.CIFAR10(root='./data', train=True, transform=transform_train, download=True)\n",
        "test_dataset = torchvision.datasets.CIFAR10(root='./data', train=False, transform=transform_test, download=True)\n",
        "\n",
        "train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)\n",
        "test_loader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False)\n",
        "\n",
        "\n",
        "# üß† Create Model\n",
        "model = nfnet_f0().to(DEVICE)\n",
        "\n",
        "# ‚öôÔ∏è Optimizer and Loss\n",
        "optimizer = optim.AdamW(model.parameters(), lr=LR)\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "\n",
        "\n",
        "# üìà Train Loop\n",
        "def train(model, device, loader, optimizer, epoch):\n",
        "    model.train()\n",
        "    for batch_idx, (data, target) in enumerate(loader):\n",
        "        data, target = data.to(device), target.to(device)\n",
        "        optimizer.zero_grad()\n",
        "        output = model(data)\n",
        "        loss = criterion(output, target)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        if batch_idx % 50 == 0:\n",
        "            print(f'Train Epoch: {epoch} [{batch_idx * len(data)}/{len(loader.dataset)}]\\tLoss: {loss.item():.6f}')\n",
        "\n",
        "\n",
        "# üìä Test Loop\n",
        "def test(model, device, loader):\n",
        "    model.eval()\n",
        "    correct = 0\n",
        "    total = 0\n",
        "    with torch.no_grad():\n",
        "        for data, target in loader:\n",
        "            data, target = data.to(device), target.to(device)\n",
        "            outputs = model(data)\n",
        "            _, predicted = torch.max(outputs.data, 1)\n",
        "            total += target.size(0)\n",
        "            correct += (predicted == target).sum().item()\n",
        "\n",
        "    accuracy = 100 * correct / total\n",
        "    print(f'\\nTest Accuracy: {correct}/{total} ({accuracy:.2f}%)\\n')\n",
        "\n",
        "\n",
        "# üèãÔ∏è‚Äç‚ôÇÔ∏è Training Loop\n",
        "for epoch in range(1, EPOCHS + 1):\n",
        "    train(model, DEVICE, train_loader, optimizer, epoch)\n",
        "    test(model, DEVICE, test_loader)\n",
        "\n",
        "print(\"‚úÖ Training completed!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AsPzF0gevX0K",
        "outputId": "08909609-73f5-4486-81d8-32a218a02cca"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 170M/170M [00:03<00:00, 45.1MB/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Epoch: 1 [0/50000]\tLoss: 966237718839296.000000\n",
            "Train Epoch: 1 [25600/50000]\tLoss: 6298208225460224.000000\n",
            "\n",
            "Test Accuracy: 1164/10000 (11.64%)\n",
            "\n",
            "Train Epoch: 2 [0/50000]\tLoss: 1322471970045952.000000\n",
            "Train Epoch: 2 [25600/50000]\tLoss: 566837905457152.000000\n",
            "\n",
            "Test Accuracy: 1199/10000 (11.99%)\n",
            "\n",
            "Train Epoch: 3 [0/50000]\tLoss: 501828340940800.000000\n",
            "Train Epoch: 3 [25600/50000]\tLoss: 300496246013952.000000\n",
            "\n",
            "Test Accuracy: 1144/10000 (11.44%)\n",
            "\n",
            "Train Epoch: 4 [0/50000]\tLoss: 312400955834368.000000\n",
            "Train Epoch: 4 [25600/50000]\tLoss: 383688017707008.000000\n",
            "\n",
            "Test Accuracy: 1148/10000 (11.48%)\n",
            "\n",
            "Train Epoch: 5 [0/50000]\tLoss: 148997935202304.000000\n",
            "Train Epoch: 5 [25600/50000]\tLoss: 195611466924032.000000\n",
            "\n",
            "Test Accuracy: 1063/10000 (10.63%)\n",
            "\n",
            "Train Epoch: 6 [0/50000]\tLoss: 176034653667328.000000\n",
            "Train Epoch: 6 [25600/50000]\tLoss: 230843284979712.000000\n",
            "\n",
            "Test Accuracy: 1135/10000 (11.35%)\n",
            "\n",
            "Train Epoch: 7 [0/50000]\tLoss: 221516075630592.000000\n",
            "Train Epoch: 7 [25600/50000]\tLoss: 404619742150656.000000\n",
            "\n",
            "Test Accuracy: 1058/10000 (10.58%)\n",
            "\n",
            "Train Epoch: 8 [0/50000]\tLoss: 196905661366272.000000\n",
            "Train Epoch: 8 [25600/50000]\tLoss: 129176115871744.000000\n",
            "\n",
            "Test Accuracy: 1082/10000 (10.82%)\n",
            "\n",
            "Train Epoch: 9 [0/50000]\tLoss: 120479360745472.000000\n",
            "Train Epoch: 9 [25600/50000]\tLoss: 101312297435136.000000\n",
            "\n",
            "Test Accuracy: 1138/10000 (11.38%)\n",
            "\n",
            "Train Epoch: 10 [0/50000]\tLoss: 120296413593600.000000\n",
            "Train Epoch: 10 [25600/50000]\tLoss: 127285382348800.000000\n",
            "\n",
            "Test Accuracy: 1046/10000 (10.46%)\n",
            "\n",
            "Train Epoch: 11 [0/50000]\tLoss: 68417822392320.000000\n",
            "Train Epoch: 11 [25600/50000]\tLoss: 87712694534144.000000\n",
            "\n",
            "Test Accuracy: 1080/10000 (10.80%)\n",
            "\n",
            "Train Epoch: 12 [0/50000]\tLoss: 60204989284352.000000\n",
            "Train Epoch: 12 [25600/50000]\tLoss: 55919241068544.000000\n",
            "\n",
            "Test Accuracy: 1052/10000 (10.52%)\n",
            "\n",
            "Train Epoch: 13 [0/50000]\tLoss: 72600004853760.000000\n",
            "Train Epoch: 13 [25600/50000]\tLoss: 51197654335488.000000\n",
            "\n",
            "Test Accuracy: 1034/10000 (10.34%)\n",
            "\n",
            "Train Epoch: 14 [0/50000]\tLoss: 40431677079552.000000\n",
            "Train Epoch: 14 [25600/50000]\tLoss: 59096401182720.000000\n",
            "\n",
            "Test Accuracy: 1035/10000 (10.35%)\n",
            "\n",
            "Train Epoch: 15 [0/50000]\tLoss: 52923962753024.000000\n",
            "Train Epoch: 15 [25600/50000]\tLoss: 48117579776000.000000\n",
            "\n",
            "Test Accuracy: 994/10000 (9.94%)\n",
            "\n",
            "Train Epoch: 16 [0/50000]\tLoss: 34855398146048.000000\n",
            "Train Epoch: 16 [25600/50000]\tLoss: 67325390749696.000000\n",
            "\n",
            "Test Accuracy: 1093/10000 (10.93%)\n",
            "\n",
            "Train Epoch: 17 [0/50000]\tLoss: 50833521639424.000000\n",
            "Train Epoch: 17 [25600/50000]\tLoss: 33456151068672.000000\n",
            "\n",
            "Test Accuracy: 1097/10000 (10.97%)\n",
            "\n",
            "Train Epoch: 18 [0/50000]\tLoss: 34214521077760.000000\n",
            "Train Epoch: 18 [25600/50000]\tLoss: 46369356120064.000000\n",
            "\n",
            "Test Accuracy: 1269/10000 (12.69%)\n",
            "\n",
            "Train Epoch: 19 [0/50000]\tLoss: 35277225590784.000000\n",
            "Train Epoch: 19 [25600/50000]\tLoss: 26996121796608.000000\n",
            "\n",
            "Test Accuracy: 1054/10000 (10.54%)\n",
            "\n",
            "Train Epoch: 20 [0/50000]\tLoss: 31059483820032.000000\n",
            "Train Epoch: 20 [25600/50000]\tLoss: 18976551731200.000000\n",
            "\n",
            "Test Accuracy: 1147/10000 (11.47%)\n",
            "\n",
            "‚úÖ Training completed!\n"
          ]
        }
      ]
    }
  ]
}